import { Schema } from 'mongoose';
export declare const UserSchema: Schema<any, import("mongoose").Model<any, any, any, any, any, any>, {}, {}, {}, {}, import("mongoose").DefaultSchemaOptions, {
    name: string;
    email: string;
    password: string;
    isEmailVerified: boolean;
    onboardingComplete: boolean;
    role: string;
    medications: any[];
    trackedConditions: any[];
    activityLog: any[];
    createdAt: Date;
    updatedAt: Date;
    resetPasswordToken?: string;
    resetPasswordExpires?: Date;
    emailVerificationToken?: string;
    emailVerificationTokenExpires?: Date;
    passwordResetToken?: string;
    passwordResetTokenExpires?: Date;
    phone?: string;
    age?: number;
    gender?: string;
    dateOfBirth?: Date;
    profilePicture?: string;
    address?: string;
    emergencyContactName?: string;
    emergencyContactPhone?: string;
    bloodType?: string;
    allergies?: string;
    chronicConditions?: string;
    currentMedications?: string;
    medicalHistory?: string;
    preferredLanguage?: string;
    occupation?: string;
    subscriptionPlan?: string;
}, import("mongoose").Document<unknown, {}, import("mongoose").FlatRecord<{
    name: string;
    email: string;
    password: string;
    isEmailVerified: boolean;
    onboardingComplete: boolean;
    role: string;
    medications: any[];
    trackedConditions: any[];
    activityLog: any[];
    createdAt: Date;
    updatedAt: Date;
    resetPasswordToken?: string;
    resetPasswordExpires?: Date;
    emailVerificationToken?: string;
    emailVerificationTokenExpires?: Date;
    passwordResetToken?: string;
    passwordResetTokenExpires?: Date;
    phone?: string;
    age?: number;
    gender?: string;
    dateOfBirth?: Date;
    profilePicture?: string;
    address?: string;
    emergencyContactName?: string;
    emergencyContactPhone?: string;
    bloodType?: string;
    allergies?: string;
    chronicConditions?: string;
    currentMedications?: string;
    medicalHistory?: string;
    preferredLanguage?: string;
    occupation?: string;
    subscriptionPlan?: string;
}>> & import("mongoose").FlatRecord<{
    name: string;
    email: string;
    password: string;
    isEmailVerified: boolean;
    onboardingComplete: boolean;
    role: string;
    medications: any[];
    trackedConditions: any[];
    activityLog: any[];
    createdAt: Date;
    updatedAt: Date;
    resetPasswordToken?: string;
    resetPasswordExpires?: Date;
    emailVerificationToken?: string;
    emailVerificationTokenExpires?: Date;
    passwordResetToken?: string;
    passwordResetTokenExpires?: Date;
    phone?: string;
    age?: number;
    gender?: string;
    dateOfBirth?: Date;
    profilePicture?: string;
    address?: string;
    emergencyContactName?: string;
    emergencyContactPhone?: string;
    bloodType?: string;
    allergies?: string;
    chronicConditions?: string;
    currentMedications?: string;
    medicalHistory?: string;
    preferredLanguage?: string;
    occupation?: string;
    subscriptionPlan?: string;
}> & {
    _id: import("mongoose").Types.ObjectId;
}>;
export declare const UserMongoModel: import("mongoose").Model<{
    name: string;
    email: string;
    password: string;
    isEmailVerified: boolean;
    onboardingComplete: boolean;
    role: string;
    medications: any[];
    trackedConditions: any[];
    activityLog: any[];
    createdAt: Date;
    updatedAt: Date;
    resetPasswordToken?: string;
    resetPasswordExpires?: Date;
    emailVerificationToken?: string;
    emailVerificationTokenExpires?: Date;
    passwordResetToken?: string;
    passwordResetTokenExpires?: Date;
    phone?: string;
    age?: number;
    gender?: string;
    dateOfBirth?: Date;
    profilePicture?: string;
    address?: string;
    emergencyContactName?: string;
    emergencyContactPhone?: string;
    bloodType?: string;
    allergies?: string;
    chronicConditions?: string;
    currentMedications?: string;
    medicalHistory?: string;
    preferredLanguage?: string;
    occupation?: string;
    subscriptionPlan?: string;
}, {}, {}, {}, import("mongoose").Document<unknown, {}, {
    name: string;
    email: string;
    password: string;
    isEmailVerified: boolean;
    onboardingComplete: boolean;
    role: string;
    medications: any[];
    trackedConditions: any[];
    activityLog: any[];
    createdAt: Date;
    updatedAt: Date;
    resetPasswordToken?: string;
    resetPasswordExpires?: Date;
    emailVerificationToken?: string;
    emailVerificationTokenExpires?: Date;
    passwordResetToken?: string;
    passwordResetTokenExpires?: Date;
    phone?: string;
    age?: number;
    gender?: string;
    dateOfBirth?: Date;
    profilePicture?: string;
    address?: string;
    emergencyContactName?: string;
    emergencyContactPhone?: string;
    bloodType?: string;
    allergies?: string;
    chronicConditions?: string;
    currentMedications?: string;
    medicalHistory?: string;
    preferredLanguage?: string;
    occupation?: string;
    subscriptionPlan?: string;
}> & {
    name: string;
    email: string;
    password: string;
    isEmailVerified: boolean;
    onboardingComplete: boolean;
    role: string;
    medications: any[];
    trackedConditions: any[];
    activityLog: any[];
    createdAt: Date;
    updatedAt: Date;
    resetPasswordToken?: string;
    resetPasswordExpires?: Date;
    emailVerificationToken?: string;
    emailVerificationTokenExpires?: Date;
    passwordResetToken?: string;
    passwordResetTokenExpires?: Date;
    phone?: string;
    age?: number;
    gender?: string;
    dateOfBirth?: Date;
    profilePicture?: string;
    address?: string;
    emergencyContactName?: string;
    emergencyContactPhone?: string;
    bloodType?: string;
    allergies?: string;
    chronicConditions?: string;
    currentMedications?: string;
    medicalHistory?: string;
    preferredLanguage?: string;
    occupation?: string;
    subscriptionPlan?: string;
} & {
    _id: import("mongoose").Types.ObjectId;
}, Schema<any, import("mongoose").Model<any, any, any, any, any, any>, {}, {}, {}, {}, import("mongoose").DefaultSchemaOptions, {
    name: string;
    email: string;
    password: string;
    isEmailVerified: boolean;
    onboardingComplete: boolean;
    role: string;
    medications: any[];
    trackedConditions: any[];
    activityLog: any[];
    createdAt: Date;
    updatedAt: Date;
    resetPasswordToken?: string;
    resetPasswordExpires?: Date;
    emailVerificationToken?: string;
    emailVerificationTokenExpires?: Date;
    passwordResetToken?: string;
    passwordResetTokenExpires?: Date;
    phone?: string;
    age?: number;
    gender?: string;
    dateOfBirth?: Date;
    profilePicture?: string;
    address?: string;
    emergencyContactName?: string;
    emergencyContactPhone?: string;
    bloodType?: string;
    allergies?: string;
    chronicConditions?: string;
    currentMedications?: string;
    medicalHistory?: string;
    preferredLanguage?: string;
    occupation?: string;
    subscriptionPlan?: string;
}, import("mongoose").Document<unknown, {}, import("mongoose").FlatRecord<{
    name: string;
    email: string;
    password: string;
    isEmailVerified: boolean;
    onboardingComplete: boolean;
    role: string;
    medications: any[];
    trackedConditions: any[];
    activityLog: any[];
    createdAt: Date;
    updatedAt: Date;
    resetPasswordToken?: string;
    resetPasswordExpires?: Date;
    emailVerificationToken?: string;
    emailVerificationTokenExpires?: Date;
    passwordResetToken?: string;
    passwordResetTokenExpires?: Date;
    phone?: string;
    age?: number;
    gender?: string;
    dateOfBirth?: Date;
    profilePicture?: string;
    address?: string;
    emergencyContactName?: string;
    emergencyContactPhone?: string;
    bloodType?: string;
    allergies?: string;
    chronicConditions?: string;
    currentMedications?: string;
    medicalHistory?: string;
    preferredLanguage?: string;
    occupation?: string;
    subscriptionPlan?: string;
}>> & import("mongoose").FlatRecord<{
    name: string;
    email: string;
    password: string;
    isEmailVerified: boolean;
    onboardingComplete: boolean;
    role: string;
    medications: any[];
    trackedConditions: any[];
    activityLog: any[];
    createdAt: Date;
    updatedAt: Date;
    resetPasswordToken?: string;
    resetPasswordExpires?: Date;
    emailVerificationToken?: string;
    emailVerificationTokenExpires?: Date;
    passwordResetToken?: string;
    passwordResetTokenExpires?: Date;
    phone?: string;
    age?: number;
    gender?: string;
    dateOfBirth?: Date;
    profilePicture?: string;
    address?: string;
    emergencyContactName?: string;
    emergencyContactPhone?: string;
    bloodType?: string;
    allergies?: string;
    chronicConditions?: string;
    currentMedications?: string;
    medicalHistory?: string;
    preferredLanguage?: string;
    occupation?: string;
    subscriptionPlan?: string;
}> & {
    _id: import("mongoose").Types.ObjectId;
}>>;
